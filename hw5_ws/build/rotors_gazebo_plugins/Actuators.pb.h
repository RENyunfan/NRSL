// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Actuators.proto

#ifndef PROTOBUF_Actuators_2eproto__INCLUDED
#define PROTOBUF_Actuators_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Header.pb.h"
// @@protoc_insertion_point(includes)

namespace gz_sensor_msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Actuators_2eproto();
void protobuf_AssignDesc_Actuators_2eproto();
void protobuf_ShutdownFile_Actuators_2eproto();

class Actuators;

// ===================================================================

class Actuators : public ::google::protobuf::Message {
 public:
  Actuators();
  virtual ~Actuators();

  Actuators(const Actuators& from);

  inline Actuators& operator=(const Actuators& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Actuators& default_instance();

  void Swap(Actuators* other);

  // implements Message ----------------------------------------------

  Actuators* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Actuators& from);
  void MergeFrom(const Actuators& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gz_std_msgs.Header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::gz_std_msgs::Header& header() const;
  inline ::gz_std_msgs::Header* mutable_header();
  inline ::gz_std_msgs::Header* release_header();
  inline void set_allocated_header(::gz_std_msgs::Header* header);

  // repeated double angles = 2 [packed = true];
  inline int angles_size() const;
  inline void clear_angles();
  static const int kAnglesFieldNumber = 2;
  inline double angles(int index) const;
  inline void set_angles(int index, double value);
  inline void add_angles(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      angles() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_angles();

  // repeated double angular_velocities = 3 [packed = true];
  inline int angular_velocities_size() const;
  inline void clear_angular_velocities();
  static const int kAngularVelocitiesFieldNumber = 3;
  inline double angular_velocities(int index) const;
  inline void set_angular_velocities(int index, double value);
  inline void add_angular_velocities(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      angular_velocities() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_angular_velocities();

  // repeated double normalized = 4 [packed = true];
  inline int normalized_size() const;
  inline void clear_normalized();
  static const int kNormalizedFieldNumber = 4;
  inline double normalized(int index) const;
  inline void set_normalized(int index, double value);
  inline void add_normalized(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      normalized() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_normalized();

  // @@protoc_insertion_point(class_scope:gz_sensor_msgs.Actuators)
 private:
  inline void set_has_header();
  inline void clear_has_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gz_std_msgs::Header* header_;
  ::google::protobuf::RepeatedField< double > angles_;
  mutable int _angles_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > angular_velocities_;
  mutable int _angular_velocities_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > normalized_;
  mutable int _normalized_cached_byte_size_;
  friend void  protobuf_AddDesc_Actuators_2eproto();
  friend void protobuf_AssignDesc_Actuators_2eproto();
  friend void protobuf_ShutdownFile_Actuators_2eproto();

  void InitAsDefaultInstance();
  static Actuators* default_instance_;
};
// ===================================================================


// ===================================================================

// Actuators

// required .gz_std_msgs.Header header = 1;
inline bool Actuators::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Actuators::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Actuators::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Actuators::clear_header() {
  if (header_ != NULL) header_->::gz_std_msgs::Header::Clear();
  clear_has_header();
}
inline const ::gz_std_msgs::Header& Actuators::header() const {
  // @@protoc_insertion_point(field_get:gz_sensor_msgs.Actuators.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::gz_std_msgs::Header* Actuators::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::gz_std_msgs::Header;
  // @@protoc_insertion_point(field_mutable:gz_sensor_msgs.Actuators.header)
  return header_;
}
inline ::gz_std_msgs::Header* Actuators::release_header() {
  clear_has_header();
  ::gz_std_msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Actuators::set_allocated_header(::gz_std_msgs::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:gz_sensor_msgs.Actuators.header)
}

// repeated double angles = 2 [packed = true];
inline int Actuators::angles_size() const {
  return angles_.size();
}
inline void Actuators::clear_angles() {
  angles_.Clear();
}
inline double Actuators::angles(int index) const {
  // @@protoc_insertion_point(field_get:gz_sensor_msgs.Actuators.angles)
  return angles_.Get(index);
}
inline void Actuators::set_angles(int index, double value) {
  angles_.Set(index, value);
  // @@protoc_insertion_point(field_set:gz_sensor_msgs.Actuators.angles)
}
inline void Actuators::add_angles(double value) {
  angles_.Add(value);
  // @@protoc_insertion_point(field_add:gz_sensor_msgs.Actuators.angles)
}
inline const ::google::protobuf::RepeatedField< double >&
Actuators::angles() const {
  // @@protoc_insertion_point(field_list:gz_sensor_msgs.Actuators.angles)
  return angles_;
}
inline ::google::protobuf::RepeatedField< double >*
Actuators::mutable_angles() {
  // @@protoc_insertion_point(field_mutable_list:gz_sensor_msgs.Actuators.angles)
  return &angles_;
}

// repeated double angular_velocities = 3 [packed = true];
inline int Actuators::angular_velocities_size() const {
  return angular_velocities_.size();
}
inline void Actuators::clear_angular_velocities() {
  angular_velocities_.Clear();
}
inline double Actuators::angular_velocities(int index) const {
  // @@protoc_insertion_point(field_get:gz_sensor_msgs.Actuators.angular_velocities)
  return angular_velocities_.Get(index);
}
inline void Actuators::set_angular_velocities(int index, double value) {
  angular_velocities_.Set(index, value);
  // @@protoc_insertion_point(field_set:gz_sensor_msgs.Actuators.angular_velocities)
}
inline void Actuators::add_angular_velocities(double value) {
  angular_velocities_.Add(value);
  // @@protoc_insertion_point(field_add:gz_sensor_msgs.Actuators.angular_velocities)
}
inline const ::google::protobuf::RepeatedField< double >&
Actuators::angular_velocities() const {
  // @@protoc_insertion_point(field_list:gz_sensor_msgs.Actuators.angular_velocities)
  return angular_velocities_;
}
inline ::google::protobuf::RepeatedField< double >*
Actuators::mutable_angular_velocities() {
  // @@protoc_insertion_point(field_mutable_list:gz_sensor_msgs.Actuators.angular_velocities)
  return &angular_velocities_;
}

// repeated double normalized = 4 [packed = true];
inline int Actuators::normalized_size() const {
  return normalized_.size();
}
inline void Actuators::clear_normalized() {
  normalized_.Clear();
}
inline double Actuators::normalized(int index) const {
  // @@protoc_insertion_point(field_get:gz_sensor_msgs.Actuators.normalized)
  return normalized_.Get(index);
}
inline void Actuators::set_normalized(int index, double value) {
  normalized_.Set(index, value);
  // @@protoc_insertion_point(field_set:gz_sensor_msgs.Actuators.normalized)
}
inline void Actuators::add_normalized(double value) {
  normalized_.Add(value);
  // @@protoc_insertion_point(field_add:gz_sensor_msgs.Actuators.normalized)
}
inline const ::google::protobuf::RepeatedField< double >&
Actuators::normalized() const {
  // @@protoc_insertion_point(field_list:gz_sensor_msgs.Actuators.normalized)
  return normalized_;
}
inline ::google::protobuf::RepeatedField< double >*
Actuators::mutable_normalized() {
  // @@protoc_insertion_point(field_mutable_list:gz_sensor_msgs.Actuators.normalized)
  return &normalized_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gz_sensor_msgs

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Actuators_2eproto__INCLUDED
