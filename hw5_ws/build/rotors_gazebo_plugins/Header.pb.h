// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Header.proto

#ifndef PROTOBUF_Header_2eproto__INCLUDED
#define PROTOBUF_Header_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace gz_std_msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Header_2eproto();
void protobuf_AssignDesc_Header_2eproto();
void protobuf_ShutdownFile_Header_2eproto();

class Header;
class Header_Stamp;

// ===================================================================

class Header_Stamp : public ::google::protobuf::Message {
 public:
  Header_Stamp();
  virtual ~Header_Stamp();

  Header_Stamp(const Header_Stamp& from);

  inline Header_Stamp& operator=(const Header_Stamp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header_Stamp& default_instance();

  void Swap(Header_Stamp* other);

  // implements Message ----------------------------------------------

  Header_Stamp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header_Stamp& from);
  void MergeFrom(const Header_Stamp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 sec = 1;
  inline bool has_sec() const;
  inline void clear_sec();
  static const int kSecFieldNumber = 1;
  inline ::google::protobuf::uint32 sec() const;
  inline void set_sec(::google::protobuf::uint32 value);

  // required uint32 nsec = 2;
  inline bool has_nsec() const;
  inline void clear_nsec();
  static const int kNsecFieldNumber = 2;
  inline ::google::protobuf::uint32 nsec() const;
  inline void set_nsec(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gz_std_msgs.Header.Stamp)
 private:
  inline void set_has_sec();
  inline void clear_has_sec();
  inline void set_has_nsec();
  inline void clear_has_nsec();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 sec_;
  ::google::protobuf::uint32 nsec_;
  friend void  protobuf_AddDesc_Header_2eproto();
  friend void protobuf_AssignDesc_Header_2eproto();
  friend void protobuf_ShutdownFile_Header_2eproto();

  void InitAsDefaultInstance();
  static Header_Stamp* default_instance_;
};
// -------------------------------------------------------------------

class Header : public ::google::protobuf::Message {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  void Swap(Header* other);

  // implements Message ----------------------------------------------

  Header* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Header_Stamp Stamp;

  // accessors -------------------------------------------------------

  // required string frame_id = 1;
  inline bool has_frame_id() const;
  inline void clear_frame_id();
  static const int kFrameIdFieldNumber = 1;
  inline const ::std::string& frame_id() const;
  inline void set_frame_id(const ::std::string& value);
  inline void set_frame_id(const char* value);
  inline void set_frame_id(const char* value, size_t size);
  inline ::std::string* mutable_frame_id();
  inline ::std::string* release_frame_id();
  inline void set_allocated_frame_id(::std::string* frame_id);

  // required .gz_std_msgs.Header.Stamp stamp = 2;
  inline bool has_stamp() const;
  inline void clear_stamp();
  static const int kStampFieldNumber = 2;
  inline const ::gz_std_msgs::Header_Stamp& stamp() const;
  inline ::gz_std_msgs::Header_Stamp* mutable_stamp();
  inline ::gz_std_msgs::Header_Stamp* release_stamp();
  inline void set_allocated_stamp(::gz_std_msgs::Header_Stamp* stamp);

  // @@protoc_insertion_point(class_scope:gz_std_msgs.Header)
 private:
  inline void set_has_frame_id();
  inline void clear_has_frame_id();
  inline void set_has_stamp();
  inline void clear_has_stamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* frame_id_;
  ::gz_std_msgs::Header_Stamp* stamp_;
  friend void  protobuf_AddDesc_Header_2eproto();
  friend void protobuf_AssignDesc_Header_2eproto();
  friend void protobuf_ShutdownFile_Header_2eproto();

  void InitAsDefaultInstance();
  static Header* default_instance_;
};
// ===================================================================


// ===================================================================

// Header_Stamp

// required uint32 sec = 1;
inline bool Header_Stamp::has_sec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header_Stamp::set_has_sec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Header_Stamp::clear_has_sec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Header_Stamp::clear_sec() {
  sec_ = 0u;
  clear_has_sec();
}
inline ::google::protobuf::uint32 Header_Stamp::sec() const {
  // @@protoc_insertion_point(field_get:gz_std_msgs.Header.Stamp.sec)
  return sec_;
}
inline void Header_Stamp::set_sec(::google::protobuf::uint32 value) {
  set_has_sec();
  sec_ = value;
  // @@protoc_insertion_point(field_set:gz_std_msgs.Header.Stamp.sec)
}

// required uint32 nsec = 2;
inline bool Header_Stamp::has_nsec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Header_Stamp::set_has_nsec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Header_Stamp::clear_has_nsec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Header_Stamp::clear_nsec() {
  nsec_ = 0u;
  clear_has_nsec();
}
inline ::google::protobuf::uint32 Header_Stamp::nsec() const {
  // @@protoc_insertion_point(field_get:gz_std_msgs.Header.Stamp.nsec)
  return nsec_;
}
inline void Header_Stamp::set_nsec(::google::protobuf::uint32 value) {
  set_has_nsec();
  nsec_ = value;
  // @@protoc_insertion_point(field_set:gz_std_msgs.Header.Stamp.nsec)
}

// -------------------------------------------------------------------

// Header

// required string frame_id = 1;
inline bool Header::has_frame_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header::set_has_frame_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Header::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Header::clear_frame_id() {
  if (frame_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_id_->clear();
  }
  clear_has_frame_id();
}
inline const ::std::string& Header::frame_id() const {
  // @@protoc_insertion_point(field_get:gz_std_msgs.Header.frame_id)
  return *frame_id_;
}
inline void Header::set_frame_id(const ::std::string& value) {
  set_has_frame_id();
  if (frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_id_ = new ::std::string;
  }
  frame_id_->assign(value);
  // @@protoc_insertion_point(field_set:gz_std_msgs.Header.frame_id)
}
inline void Header::set_frame_id(const char* value) {
  set_has_frame_id();
  if (frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_id_ = new ::std::string;
  }
  frame_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:gz_std_msgs.Header.frame_id)
}
inline void Header::set_frame_id(const char* value, size_t size) {
  set_has_frame_id();
  if (frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_id_ = new ::std::string;
  }
  frame_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gz_std_msgs.Header.frame_id)
}
inline ::std::string* Header::mutable_frame_id() {
  set_has_frame_id();
  if (frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gz_std_msgs.Header.frame_id)
  return frame_id_;
}
inline ::std::string* Header::release_frame_id() {
  clear_has_frame_id();
  if (frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = frame_id_;
    frame_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Header::set_allocated_frame_id(::std::string* frame_id) {
  if (frame_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete frame_id_;
  }
  if (frame_id) {
    set_has_frame_id();
    frame_id_ = frame_id;
  } else {
    clear_has_frame_id();
    frame_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gz_std_msgs.Header.frame_id)
}

// required .gz_std_msgs.Header.Stamp stamp = 2;
inline bool Header::has_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Header::set_has_stamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Header::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Header::clear_stamp() {
  if (stamp_ != NULL) stamp_->::gz_std_msgs::Header_Stamp::Clear();
  clear_has_stamp();
}
inline const ::gz_std_msgs::Header_Stamp& Header::stamp() const {
  // @@protoc_insertion_point(field_get:gz_std_msgs.Header.stamp)
  return stamp_ != NULL ? *stamp_ : *default_instance_->stamp_;
}
inline ::gz_std_msgs::Header_Stamp* Header::mutable_stamp() {
  set_has_stamp();
  if (stamp_ == NULL) stamp_ = new ::gz_std_msgs::Header_Stamp;
  // @@protoc_insertion_point(field_mutable:gz_std_msgs.Header.stamp)
  return stamp_;
}
inline ::gz_std_msgs::Header_Stamp* Header::release_stamp() {
  clear_has_stamp();
  ::gz_std_msgs::Header_Stamp* temp = stamp_;
  stamp_ = NULL;
  return temp;
}
inline void Header::set_allocated_stamp(::gz_std_msgs::Header_Stamp* stamp) {
  delete stamp_;
  stamp_ = stamp;
  if (stamp) {
    set_has_stamp();
  } else {
    clear_has_stamp();
  }
  // @@protoc_insertion_point(field_set_allocated:gz_std_msgs.Header.stamp)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gz_std_msgs

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Header_2eproto__INCLUDED
